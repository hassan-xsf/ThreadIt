// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(cuid())
  name              String?
  password          String?
  email             String?     @unique
  image             String?
  accounts          Account[]
  sessions          Session[]
  createdAt         DateTime    @default(now())
  emailVerified     DateTime?
  joinedCommunities Community[]
  posts             Post[]
  Vote              Vote[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  access_token      String?
  expiresAt         Int?
  token_type        String?
  scope             String?
  idToken           String?
  sessionState      String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Community {
  id        String   @id @default(cuid())
  name      String
  banner    String?
  profile   String?
  createdAt DateTime @default(now())

  members User[]
  posts   Post[]
}

model Post {
  id          String    @id @default(cuid())
  heading     String
  content     String
  postImage   String?
  User        User?     @relation(fields: [postOwnerId], references: [id])
  postOwnerId String?
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  createdAt   DateTime  @default(now())
  comments    Comment[]
  votes       Vote[]
}

model Comment {
  id        String   @unique @default(uuid())
  content   String
  createdAt DateTime @default(now())
  votes     Vote[]
  postId    String?

  parentComment Comment? @relation("commentToParent", fields: [commentId], references: [id])
  commentId     String?

  children Comment[] @relation("commentToParent")
  Post     Post?     @relation(fields: [postId], references: [id])
}

enum VoteType {
  Upvote
  DownVote
}

model Vote {
  id   String   @unique @default(uuid())
  type VoteType

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
}
